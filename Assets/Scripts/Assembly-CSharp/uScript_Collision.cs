using System;
using UnityEngine;

[FriendlyName("On Collision", "Fires an event signal when Instance GameObject receives a collision. The GameObjects involved must have rigidbody components on them to fire this event.")]
[NodeToolTip("Fires an event signal when Instance receives a collision.")]
[NodeAuthor("Detox Studios LLC", "http://www.detoxstudios.com")]
[NodeHelp("http://www.uscript.net/docs/index.php?title=Node_Reference_Guide#On_Collision")]
[NodeCopyright("Copyright 2011 by Detox Studios LLC")]
[NodePath("Events/Physics Events")]
public class uScript_Collision : uScriptEvent
{
	public class CollisionEventArgs : EventArgs
	{
		private Collision m_Collision;

		[FriendlyName("Relative Velocity", "The relative linear velocity of the two colliding GameObjects.")]
		[SocketState(false, false)]
		public Vector3 RelativeVelocity
		{
			get
			{
				return m_Collision.relativeVelocity;
			}
		}

		[SocketState(false, false)]
		[FriendlyName("Rigid Body", "The rigidbody component of the Instigator GameObject. This is null if the Instigator is a collider with no rigidbody attached.")]
		public Rigidbody RigidBody
		{
			get
			{
				return m_Collision.rigidbody;
			}
		}

		[FriendlyName("Collider", "The collider component of the Instigator GameObject.")]
		[SocketState(false, false)]
		public Collider Collider
		{
			get
			{
				return m_Collision.collider;
			}
		}

		[SocketState(false, false)]
		[FriendlyName("Transform", "The transform component of the Instigator GameObject.")]
		public Transform Transform
		{
			get
			{
				return m_Collision.transform;
			}
		}

		[FriendlyName("Contact Points", "The contact points generated by the physics engine from the collision.")]
		[SocketState(false, false)]
		public ContactPoint[] Contacts
		{
			get
			{
				return m_Collision.contacts;
			}
		}

		[FriendlyName("Instigator", "The GameObject that collided with this GameObject (the Instance).")]
		public GameObject GameObject
		{
			get
			{
				return m_Collision.gameObject;
			}
		}

		public CollisionEventArgs(Collision collision)
		{
			m_Collision = collision;
		}
	}

	public delegate void uScriptEventHandler(object sender, CollisionEventArgs args);

	[FriendlyName("On Collision Enter")]
	public event uScriptEventHandler OnEnterCollision;

	[FriendlyName("On Collision Exit")]
	public event uScriptEventHandler OnExitCollision;

	[FriendlyName("On Collision Stay")]
	public event uScriptEventHandler WhileInsideCollision;

	private void OnCollisionEnter(Collision collision)
	{
		if (this.OnEnterCollision != null)
		{
			this.OnEnterCollision(this, new CollisionEventArgs(collision));
		}
	}

	private void OnCollisionExit(Collision collision)
	{
		if (this.OnExitCollision != null)
		{
			this.OnExitCollision(this, new CollisionEventArgs(collision));
		}
	}

	private void OnCollisionStay(Collision collision)
	{
		if (this.WhileInsideCollision != null)
		{
			this.WhileInsideCollision(this, new CollisionEventArgs(collision));
		}
	}
}
