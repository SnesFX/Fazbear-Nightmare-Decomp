using System;
using System.Security.Cryptography;
using System.Text;

[FriendlyName("Generate SHA1 Hash", "Generates an SHA1 hash string from a key.")]
[NodePath("Actions/Security")]
[NodeCopyright("Copyright 2011 by Detox Studios LLC")]
[NodeToolTip("Generates an SHA1 hash string from a key.")]
[NodeAuthor("Detox Studios LLC", "http://www.detoxstudios.com")]
[NodeHelp("http://www.uscript.net/docs/index.php?title=Node_Reference_Guide")]
public class uScriptAct_GenerateSHA1Hash : uScriptLogic
{
	public bool Out
	{
		get
		{
			return true;
		}
	}

	public void In([FriendlyName("Key", "The string to be used to generate the hash from.")] string Key, [FriendlyName("SHA1 Hash", "The SHA1 Hash generated by the Key.")] out string Hash)
	{
		if (Key != string.Empty)
		{
			UTF8Encoding uTF8Encoding = new UTF8Encoding();
			byte[] bytes = uTF8Encoding.GetBytes(Key);
			SHA1CryptoServiceProvider sHA1CryptoServiceProvider = new SHA1CryptoServiceProvider();
			byte[] array = sHA1CryptoServiceProvider.ComputeHash(bytes);
			string text = string.Empty;
			for (int i = 0; i < array.Length; i++)
			{
				text += Convert.ToString(array[i], 16).PadLeft(2, '0');
			}
			Hash = text.PadLeft(32, '0');
		}
		else
		{
			uScriptDebug.Log("[Generate SHA1 Hash] The Key provided was empty, returning an empty string for the SHA1 Hash.", uScriptDebug.Type.Warning);
			Hash = string.Empty;
		}
	}
}
